# https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lambda/client/create_function.html#:~:text=response%20%3D%20client.create_function(%0A%20%20%20%20Code,%2C%0A%20%20%20%20%7D%2C%0A)%0A%0Aprint(response)
import boto3
from moto import mock_aws
import json

# Role & policy creation code generated by Phind via the following prompt
"""
create a policy which allows an aws lambda and an s3 bucket to communicate and attach the policy to a role named lambda-role
https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iam/client/create_policy.html
https://boto3.amazonaws.com/v1/documentation/api/latest/guide/iam-example-policies.html
^ forgot to prompt to actually create the lambda-role too 
"""
@mock_aws
def create_role_and_policy():
    iam_client = boto3.client('iam')
    try:
        # Attempt to get the existing role
        iam_client.get_role(RoleName='lambda-role')
    except iam_client.exceptions.NoSuchEntityException:
        # Role does not exist, create it
        response = iam_client.create_role(
            RoleName='lambda-role',
            AssumeRolePolicyDocument='{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
        )
        print(f"Created role {response['Role']['RoleName']}")
    else:
        print("Role already exists")
    # Assuming the role already exists, otherwise create it first
    # Phind generated: 
    #put_role_trust_policy_response = iam_client.put_role_trust_policy(
    # AttributeError: 'IAM' object has no attribute 'put_role_trust_policy'. Did you mean: 'put_role_policy'?
    # instead of 
    put_role_policy_response = iam_client.put_role_policy(
        RoleName='lambda-role',
        # Phind didn't seem to catch that this method has PolicyName as a parameter 
        # https://boto3.amazonaws.com/v1/documentation/api/1.26.92/reference/services/iam/client/put_role_policy.html
        PolicyName="LambdaS3AccessPolicy",
        PolicyDocument='''{
        "Version": "2012-10-17",
        "Statement": [
            {
            "Effect": "Allow",
            "Principal": {"Service": "lambda.amazonaws.com"},
            "Action": "sts:AssumeRole"
            }
        ]
        }'''
    )
    print("Updated trust policy for role:", put_role_policy_response)

    # Initialize the IAM client
    # Define the policy document
    policy_document = {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "s3:GetObject"
                ],
                "Resource": "arn:aws:s3:::images/*"
            }
        ]
    }
    # Create the policy
    policy_response = iam_client.create_policy(
        PolicyName='LambdaS3AccessPolicy',  # Replace with your desired policy name
        PolicyDocument=json.dumps(policy_document),
        Description='Allows Lambda to access S3 bucket'
    )
    print("Created policy:", policy_response['Policy']['Arn'])
    # Attach the policy to the role
    attach_response = iam_client.attach_role_policy(
        RoleName='lambda-role',
        PolicyArn=policy_response['Policy']['Arn']
    )
    print("Attached policy to role:", attach_response)
create_role_and_policy()

@mock_aws
def create_process_image_lambda(): 
    """
    # so here we are creating a function from a zipfile & uploading that zip file to S3? 
    # then AWS uses the zipfile from the S3 bucket to spin up & invoke the lambda? 
    # no, this is telling AWS to look in S3 for the zipfile 
    Code={
        'S3Bucket': "images", # 'lambda-functions-bucket',
        'S3Key': 'function.zip',
    },
    """
    response = boto3.client("lambda", region_name="us-east-1").create_function(
        # https://stackoverflow.com/a/47599666
        Code={'ZipFile': open('./process-image-lambda.zip', 'rb').read()},
        Description='Process image objects from Amazon S3.',
        FunctionName='process-image',
        Handler='process_image.handler',
        Publish=True,
        Runtime='python3.x',
        Role='arn:aws:iam::123456789012:role/lambda-role'
    )
    print(response)

create_process_image_lambda()